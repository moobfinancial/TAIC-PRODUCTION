from typing import Optional, List, Dict, Any
from pydantic import BaseModel, HttpUrl, Field

class ProductVariantBase(BaseModel):
    """
    Base model for product variants, containing common fields.
    """
    sku: str
    attributes: Dict[str, Any] # e.g., {"size": "M", "color": "Blue"}
    specific_price: Optional[float] = None # Price for this variant, overrides base product price if set
    stock_quantity: int = 0
    image_url: Optional[HttpUrl] = None

    class Config:
        from_attributes = True

class ProductVariant(ProductVariantBase):
    """
    Full ProductVariant model including IDs, used for responses.
    """
    id: int # Changed from str to int, as it's SERIAL in DB
    product_id: str

class ProductVariantCreate(ProductVariantBase):
    """
    Model for creating a new product variant.
    `product_id` will be supplied via path parameter.
    `id` is auto-generated by the database.
    """
    pass # Inherits all necessary fields from ProductVariantBase

class ProductVariantUpdate(BaseModel):
    """
    Model for updating an existing product variant. All fields are optional.
    """
    sku: Optional[str] = None
    attributes: Optional[Dict[str, Any]] = None
    specific_price: Optional[float] = None
    stock_quantity: Optional[int] = None
    image_url: Optional[HttpUrl] = None


class Product(BaseModel):
    id: str # Can be a unique identifier, e.g., platform_product_id or a merchant-provided unique ID
    name: str
    description: Optional[str] = None
    price: float # Base price of the product
    image_url: Optional[HttpUrl] = None
    category: Optional[str] = None # Consider using a more structured category model or enum if applicable

    has_variants: bool = False
    variants: List[ProductVariant] = Field(default_factory=list) # Uses the updated ProductVariant model

    stock_quantity: Optional[int] = 0

    merchant_id: Optional[str] = None
    source: Optional[str] = None
    original_cj_product_id: Optional[str] = None

    page_id: Optional[str] = None
    approval_status: str = "pending"
    data_ai_hint: Optional[str] = None

    class Config:
        from_attributes = True


class ListProductsToolInput(BaseModel):
    query: Optional[str] = None
    category: Optional[str] = None
    price_min: Optional[float] = Field(default=None, description="Minimum price for the product or its variants.")
    price_max: Optional[float] = Field(default=None, description="Maximum price for the product or its variants.")
    attributes_filter: Optional[Dict[str, str]] = Field(default=None, description="Filter by specific variant attributes, e.g., {'size': 'M', 'color': 'Red'}")
    # Add other potential filter fields here later if needed, e.g.:
    # merchant_id: Optional[str] = None
    # only_with_variants: Optional[bool] = None
    # is_approved: Optional[bool] = True # Default to searching approved products (already handled in agent)
    # in_stock_only: Optional[bool] = False
