from typing import Optional, List, Dict, Any
from pydantic import BaseModel, HttpUrl, Field

# Import for shipping_info field in Product model
from .cj_product_models import CJProductShippingInfo # Assuming this path is correct relative to execution

class ProductVariantBase(BaseModel):
    """
    Base schema for product variant data. Contains common fields for creating and representing variants.
    """
    sku: str = Field(..., description="Stock Keeping Unit for the variant, must be unique within the product, ideally globally.")
    attributes: Dict[str, Any] = Field(..., description="A dictionary of attributes defining this variant, e.g., {'size': 'M', 'color': 'Blue'}. Attribute keys should be consistent for a given product.")
    specific_price: Optional[float] = Field(default=None, description="Price specific to this variant. If set, this overrides the base product price. If null, the base product price is used.")
    stock_quantity: int = Field(default=0, ge=0, description="Available stock quantity for this specific variant.")
    image_url: Optional[HttpUrl] = Field(default=None, description="URL for an image specific to this variant, if different from the main product image.")

    class Config:
        from_attributes = True
        json_schema_extra = {
            "example": {
                "sku": "TSHIRT-BLU-M-001",
                "attributes": {"size": "M", "color": "Blue"},
                "specific_price": 22.99,
                "stock_quantity": 50,
                "image_url": "https://example.com/images/tshirt_blue_m.jpg"
            }
        }

class ProductVariant(ProductVariantBase):
    """
    Represents a full product variant, including its database ID and parent product ID. Used for responses.
    """
    id: int = Field(..., description="Unique identifier for the product variant (auto-generated).")
    product_id: int = Field(..., description="Identifier of the parent product this variant belongs to.")

    class Config:
        json_schema_extra = {
            "example": {
                "id": 101,
                "product_id": "PROD12345",
                "sku": "TSHIRT-RED-L-002",
                "attributes": {"size": "L", "color": "Red"},
                "specific_price": 23.50,
                "stock_quantity": 30,
                "image_url": "https://example.com/images/tshirt_red_l.jpg"
            }
        }


class ProductVariantCreate(ProductVariantBase):
    """
    Schema for creating a new product variant.
    The `product_id` is typically provided via a path parameter in the API endpoint, not in this request body.
    The variant `id` is auto-generated by the database upon creation.
    """
    pass # Inherits all necessary fields from ProductVariantBase, example is in ProductVariantBase


class ProductVariantUpdate(BaseModel):
    """
    Schema for updating an existing product variant. All fields are optional.
    Only include fields that need to be updated.
    """
    sku: Optional[str] = Field(default=None, description="New Stock Keeping Unit for the variant.")
    attributes: Optional[Dict[str, Any]] = Field(default=None, description="New attributes for the variant. Providing this will overwrite all existing attributes.")
    specific_price: Optional[float] = Field(default=None, description="New specific price for the variant. Set to null to revert to base product price.")
    stock_quantity: Optional[int] = Field(default=None, ge=0, description="New stock quantity for the variant.")
    image_url: Optional[HttpUrl] = Field(default=None, description="New image URL for the variant. Set to null to remove.")

    class Config:
        json_schema_extra = {
            "example": {
                "specific_price": 21.99,
                "stock_quantity": 45
            }
        }


class Product(BaseModel):
    """Represents a product, which can be a standalone item or a container for multiple variants."""
    id: str = Field(..., description="Unique identifier for the product. Can be a platform-generated ID or a merchant-provided unique ID.")
    name: str = Field(..., description="Display name of the product.")
    description: Optional[str] = Field(default=None, description="Detailed description of the product.")
    price: float = Field(..., description="Base price of the product. If the product has variants with specific prices, those may override this.")
    image_url: Optional[HttpUrl] = Field(default=None, description="URL for the main product image.")
    category: Optional[str] = Field(default=None, description="Name of the category this product belongs to. Consider using a structured category model or ID for better consistency.")

    has_variants: bool = Field(default=False, description="Indicates if this product has variants. If true, 'variants' list should be populated for DB products, or 'variant_attribute_names' for CJ products without full variant mapping yet.")
    # For products from our DB, this will be populated with full ProductVariant objects.
    # For CJ products, this list will remain empty for now, but has_variants will be true
    # and variant_attribute_names will be populated.
    variants: List[ProductVariant] = Field(default_factory=list, description="List of detailed product variants, if any. Populated for products managed directly in the system.")
    variant_attribute_names: List[str] = Field(default_factory=list, description="List of unique attribute keys (e.g., 'Color', 'Size') available for this product's variants. Especially useful for products like those from CJ Dropshipping where full variant objects might not be initially mapped.")

    stock_quantity: Optional[int] = Field(default=0, description="Overall stock quantity. If the product has variants, this is typically the sum of variant stocks. If no variants, this is the stock of the main product.")
    stock_status_text: Optional[str] = Field(default=None, description="A human-readable stock status, e.g., 'In Stock', 'Low Stock', 'Out of Stock', potentially derived from stock_quantity or external systems.")
    shipping_info: Optional[CJProductShippingInfo] = Field(default=None, description="Shipping information, potentially enriched from an external service like CJ Dropshipping Agent for relevant products.")

    merchant_id: Optional[str] = Field(default=None, description="Identifier of the merchant who owns/lists this product.")
    source: Optional[str] = Field(default=None, description="Source of the product data (e.g., 'merchant_upload', 'CJ', 'internal').")
    original_cj_product_id: Optional[str] = Field(default=None, description="If sourced from CJ Dropshipping, this stores the original CJ product ID for reference.")

    page_id: Optional[str] = Field(default=None, description="Internal reference, possibly to a CMS page or similar.") # Example, if used
    approval_status: str = Field(default="pending", description="Approval status of the product (e.g., 'pending', 'approved', 'rejected').")
    data_ai_hint: Optional[str] = Field(default=None, description="Internal notes or hints for AI processing related to this product.")

    class Config:
        from_attributes = True
        json_schema_extra = {
            "example": {
                "id": "PRODXYZ123",
                "name": "Premium Quality T-Shirt",
                "description": "A comfortable and stylish t-shirt made from 100% organic cotton.",
                "price": 25.00,
                "image_url": "https://example.com/images/tshirt_main.jpg",
                "category": "Apparel",
                "has_variants": True,
                "variants": [ProductVariant.Config.json_schema_extra["example"]],
                "variant_attribute_names": ["size", "color"],
                "stock_quantity": 80, # Sum of variant stocks if applicable
                "stock_status_text": "In Stock",
                "merchant_id": "MERCH789",
                "source": "merchant_upload",
                "approval_status": "approved"
            }
        }


class ProductCreate(BaseModel):
    """Schema for creating a new product."""
    name: str = Field(..., description="Display name of the product.")
    description: Optional[str] = Field(default=None, description="Detailed description of the product.")
    price: float = Field(..., description="Base price of the product.")
    image_url: Optional[HttpUrl] = Field(default=None, description="URL for the main product image.")
    category: Optional[str] = Field(default=None, description="Name of the category this product belongs to.")
    has_variants: bool = Field(default=False, description="Indicates if this product has variants.")
    variant_attribute_names: List[str] = Field(default_factory=list, description="List of unique attribute keys for variants.")
    stock_quantity: Optional[int] = Field(default=0, ge=0, description="Initial stock quantity.")
    merchant_id: Optional[str] = Field(default=None, description="Identifier of the merchant who owns/lists this product.")
    source: Optional[str] = Field(default=None, description="Source of the product data.")
    original_cj_product_id: Optional[str] = Field(default=None, description="Original CJ product ID if sourced from CJ Dropshipping.")
    page_id: Optional[str] = Field(default=None, description="Internal reference, possibly to a CMS page or similar.")
    approval_status: str = Field(default="pending", description="Initial approval status of the product.")
    data_ai_hint: Optional[str] = Field(default=None, description="Internal notes or hints for AI processing.")

    class Config:
        from_attributes = True
        json_schema_extra = {
            "example": {
                "name": "Premium Quality T-Shirt",
                "description": "A comfortable and stylish t-shirt made from 100% organic cotton.",
                "price": 25.00,
                "image_url": "https://example.com/images/tshirt_main.jpg",
                "category": "Apparel",
                "has_variants": True,
                "variant_attribute_names": ["size", "color"],
                "stock_quantity": 100,
                "merchant_id": "MERCH789",
                "source": "merchant_upload",
                "approval_status": "pending"
            }
        }


class ProductUpdate(BaseModel):
    """Schema for updating an existing product. All fields are optional."""
    name: Optional[str] = Field(default=None, description="New display name of the product.")
    description: Optional[str] = Field(default=None, description="New detailed description of the product.")
    price: Optional[float] = Field(default=None, description="New base price of the product.")
    image_url: Optional[HttpUrl] = Field(default=None, description="New URL for the main product image.")
    category: Optional[str] = Field(default=None, description="New name of the category this product belongs to.")
    has_variants: Optional[bool] = Field(default=None, description="Indicates if this product has variants.")
    variant_attribute_names: Optional[List[str]] = Field(default=None, description="New list of unique attribute keys for variants.")
    stock_quantity: Optional[int] = Field(default=None, ge=0, description="New stock quantity.")
    merchant_id: Optional[str] = Field(default=None, description="New identifier of the merchant.")
    source: Optional[str] = Field(default=None, description="New source of the product data.")
    original_cj_product_id: Optional[str] = Field(default=None, description="New original CJ product ID.")
    page_id: Optional[str] = Field(default=None, description="New internal reference.")
    approval_status: Optional[str] = Field(default=None, description="New approval status.")
    data_ai_hint: Optional[str] = Field(default=None, description="New internal notes or hints.")

    class Config:
        from_attributes = True
        json_schema_extra = {
            "example": {
                "name": "Updated Premium T-Shirt",
                "price": 26.50
            }
        }


class ListProductsToolInput(BaseModel):
    """Input schema for listing/searching products, typically used by AI agents or internal services."""
    query: Optional[str] = Field(default=None, description="General search query string (e.g., product name, keywords).")
    category: Optional[str] = Field(default=None, description="Filter by product category name.")
    price_min: Optional[float] = Field(default=None, ge=0, description="Minimum price for the product or its variants.")
    price_max: Optional[float] = Field(default=None, ge=0, description="Maximum price for the product or its variants.")
    attributes_filter: Optional[Dict[str, str]] = Field(default=None, description="Filter by specific variant attributes, e.g., {'size': 'M', 'color': 'Red'}. Values should match exactly.")
    # Add other potential filter fields here later if needed, e.g.:
    # merchant_id: Optional[str] = None
    # only_with_variants: Optional[bool] = None
    # is_approved: Optional[bool] = True # Default to searching approved products (already handled in agent)
    # in_stock_only: Optional[bool] = False

    class Config:
        json_schema_extra = {
            "example": {
                "query": "eco-friendly t-shirt",
                "category": "Apparel",
                "price_min": 15.00,
                "price_max": 30.00,
                "attributes_filter": {"color": "Blue"}
            }
        }
