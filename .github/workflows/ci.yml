name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # PostgreSQL configuration
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: taic_test
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/taic_test
  TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/taic_test
  
  # Frontend environment variables
  NEXT_PUBLIC_APP_URL: http://localhost:3000
  NODE_ENV: test

jobs:
  lint-and-typecheck:
    name: Lint & Typecheck
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint
      run: npm run lint
    
    - name: Typecheck
      run: npm run typecheck

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: taic_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run database migrations
      run: |
        alembic upgrade head
    
    - name: Run backend tests with coverage
      run: |
        cd tests/backend
        pytest --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: tests/backend/coverage.xml
        fail_ci_if_error: false

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run frontend tests
      run: |
        cd tests/frontend
        npm test -- --coverage --watchAll=false
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: tests/frontend/coverage/lcov.info
        fail_ci_if_error: false

  e2e-tests:
    name: E2E Tests
    needs: [backend-tests, frontend-tests]
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: taic_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Start development server
      run: |
        npm run dev &
        npx wait-on http://localhost:3000
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        NODE_ENV: test
    
    - name: Run E2E tests
      run: |
        cd tests/e2e
        npx cypress run --browser chrome --headless
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: cypress-screenshots
        path: tests/e2e/cypress/screenshots/
        if-no-files-found: ignore
    
    - name: Upload videos
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-videos
        path: tests/e2e/cypress/videos/
        if-no-files-found: ignore

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: test
        args: --severity-threshold=high --file=requirements.txt
    
    - name: Run npm audit
      run: npm audit --production
